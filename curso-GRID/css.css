html {
    box-sizing: border-box;
    font-size: 16px;
    font-family: sans-serif;
    scroll-behavior: smooth;
  }

  *,
  *::after,
  *::before {
    box-sizing: inherit;
  }

  a[href="#top"] {
    margin: 1rem;
    display: block;
    font-size: 2rem;
    text-align: center;
    text-decoration: none;
  }

  p {
    margin: 0;
  }

  h2 {
    margin-top: 50vh;
    text-align: center;
  }

  img {
    margin: auto;
    display: block;
    max-width: 100%;
    height: auto;
  }

  .menu {
    margin-bottom: 100vh;
    font-size: 125%;
  }

  .menu li {
    margin-bottom: 1rem;
  }

  .container {
    margin: 0 auto;
    width: 80%;
    height: 80vh;
    background-color: #222;
    border: medium solid #000;
  }

  .item {
    padding: 1rem;
    font-size: 1.25rem;
    background-color: #666;
    border: medium solid #999;
  }

  .sub-item{
    padding: 1rem;
    background-color: #ddd;
    border: medium solid #ccc;
  }

  .grid-explicit{
    display: grid;
    /*grid 3x3*/
    grid-template-columns: 50% 100px 1fr;/*aquí habrán tres columnas por ordén con un tamaño diferente cada una*/
    grid-template-rows: 2rem 20vh 30%;/*tres filas con un tamaño difrente cada una*/
    /*grid 5x5*/
    grid-template-columns: repeat(5, 20%);/*habrán cinco columnas pero cada una con un 20% de anchura*/
    grid-template-rows: repeat(4, auto);/*automaticamente se comparten el espacio sobrante entre ellos*/
    /*es muy probable que con auto se desborden las cuadriculas, así que aveces es mejor simplemente dar un porcentaje*/
    /*ESPACIADO ENTRE CUADRICULAS*/
    grid-column-gap: 2rem;
    grid-row-gap: 1rem;
    grid-gap: 0rem 2rem;/*es una shorthand de lo anteriormente explicado (x,y)*/
    /*ahora como estas unidades estan depreciadas entonces solo se usa gap, sin el grid*/
    gap: 0;/*gap cero es como si los otros gap's no existieran, recordar que css va en cascada*/
  }

  /*POSICIONAMIENTO DE CUADRICULAS MEDIANTE LAS GRID LINE'S*/
  .grid-explicit .item:nth-child(10){
    color: chartreuse;
    grid-row: 2/3;/*lineas dos y tres*/
    grid-column: 3/4;/*lineas tres y cuatro*/
    /*tambien podemos combinar espacios, es decir en row lo podemos cambiar a 4 y el 4 de column puede ser un 5*/
    /*grid-area: grid-row/grid-column*/
    grid-area: 2/3/3/5;/*es un shorthand de las anteriores herramientas*/
  }

  /*podemos abarcar posiciones*/
  .grid-explicit .item:nth-child(12){
    color: cyan;
    grid-row: span 2;/*toma dos cuadriculas de las filas*/
    grid-column: span 3;/*toma tres cuadriculas de las columnas*/
  }

  /*-----------------------------------------------GRID LINES NAMES-------------------------------------------------------------------------------*/
  .grid-line-names{
    display: grid;/*recordar que grid hace un relleno en la tabla padre y se acomoda automaticamente*/
    /*Grid de 3x3*/
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
    /*ahora podemos nombrar las filas y columnas*/
    grid-template-columns:[linea-c1] 1fr [linea-c2] 1fr [linea-c3] 1fr [linea-c4];
    grid-template-rows:[linea-r1] auto [linea-r2] auto [linea-r3] auto [linea-r4];
  }

  /*abarcar posiciones*/
  .grid-line-names .item:nth-child(3){
    color: cyan;
    grid-row: linea-r3/linea-r4;
    grid-column: linea-c1/linea-c4;
  }
  /*----------------------------------------------------POSICIONAMIENTO CON GRID AREAS--------------------------------------------------------------------------------*/

  .grid-areas{
    display: grid;
    /*Grid de 2x3*/
    grid-template-columns: 1fr 200px;
    grid-template-rows: 100px repeat(2, 1fr) 60px;
    grid-template-areas: 
    "header   header"
    "content  sidebar"
    "content  ."
    "footer   footer";
  }

   .header{
    grid-area: header;
  }

  .content{
    grid-area: content;
  }

  .sidebar{
    grid-area: sidebar;
  }
  
  .footer{
    grid-area: footer;
  }

  .grid-implicit{
    width: 40%;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(3, 200px);
  }

  /*-----------------------------------------FLUJO DEL GRID-------------------------------------------------------------------------------------------------------------------------------*/

  .grid-flow{
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(3, 170px);
    grid-auto-flow: row;
    grid-auto-rows: auto;/*al ser auto tomará todo el espacio disponible*/
    grid-auto-flow: column;/*hacemos un cambio de flujo al modo vertical con las columnas*/
    grid-auto-columns: 20px;
  }

  .grid-flow-dense{
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(4,200px);
    grid-auto-flow: row dense;
    grid-auto-flow: column;
  }

  .grid-flow-dense .item:nth-child(9){
    color:cyan;
    grid-row: span 3;
    grid-column: span 3;
  }

  .grid-layers{
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(4, 1fr);
  }

  .grid-layers .item:nth-child(1){
    background-color: aqua;
    grid-column: 1/3;
    grid-row: 1/3;
  }
  .grid-layers .item:nth-child(2){
    background-color: rgb(0, 255, 21);
    grid-column: 3/5;
    grid-row: 1/3;
  }
  .grid-layers .item:nth-child(3){
    background-color: rgb(251, 255, 0);
    grid-column: 1/3;
    grid-row: 3/5;
  }
  .grid-layers .item:nth-child(4){
    background-color: rgb(255, 0, 0);
    grid-column: 3/5;
    grid-row: 3/5;
  }
  /*Desde el hijo 4 ya tenemos todo ocupado en la caja explicitamente y automaticamente nos crea el hijo 5 una caja implicita*/
  /*ahora vamos a configurar esa misma caja*/
  .grid-layers .item:nth-child(5){
    background-color: rgb(255, 145, 0);
    opacity: .75;/*le podemos bajar la opacidad a ese color un 75%*/
    grid-column: 2/4;
    grid-row: 2/4;
  }

  .grid-order{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
  }

  .grid-order .item:nth-child(1){
    /*los de orden menor es decir cero, se anteponen ante este numero*/
    order: 1;
  }

  .grid-order .item:nth-child(2){
    /*los de orden menor es decir uno, se anteponen ante este numero*/
    order: 2;
  }

  .grid-order .item:nth-child(5){
    /*los de orden superior es decir cero, estaran despues de este numero*/
    order: -1;
  }
  /*-----------------------------------------------------USO DE LAS CUADRICULAS--------------------------------------------------------------------------------------------------------------------------*/
  .grid-align{
    display: grid;
    grid-template-columns: repeat(3, 200px);
    grid-template-rows: repeat(2, 200px);
    /*justify content pertenece a los flex-box pero justify items a los grid*/
    /*a tener en cuenta que los justify content actuan sobre el eje de x*/
    /*por defecto siempre esta en stretch, pero pues lo podemos cambiar*/
    justify-items: start;
    /*ahora podemos simplemente cambiar tambien el eje y para que no esté en streetch*/
    align-items: start;
  }

  .grid-align .item:nth-child(4){
    /*podemos simplemente configurar una cuadricula en especifico*/
    justify-self: center;
    align-self: center;
  }

  /*-----------------------------------------------------ALINEAMIENTO DE FILAS Y COLUMNAS-------------------------------------------------------------------------------------------------*/

  .grid-align-tracks{
    display: grid;
    grid-template-columns: repeat(3, 200px);
    grid-template-rows: repeat(2, 200px);
    /*ahora haremos uso de los justify content, moviendo sobre el eje x, todos los elementos*/
    justify-content: start;
    justify-content: end;
    justify-content: space-evenly;
    /*ahora el uso de align content actuara especificamente sobre el eje y*/
    align-content: space-evenly;
  }

  /*----------------------------------------------------------TAMAÑOS MAXIMOS Y MINIMOS-----------------------------------------------------------------------------------------------*/

  .grid-min-max{
    display: grid;
    /*cuatro columnas por quien sabe cuantas filas*/
    grid-template-columns: repeat(4, 1fr);
    grid-template-columns: repeat(4, minmax(100px, 200px));/*el minimo y el maximo valor que pueden alcanzar en ese orden*/
    grid-template-columns: repeat(4, minmax(min-content, 200px));
    grid-template-columns: repeat(4, minmax(100px,max-content));
    grid-template-columns: repeat(4, minmax(min-content, max-content));/*el maximo y minimo valor lo define el contenido de la cuadricula*/
  }

/*--------------------------------------------------------GRID'S CON PATRONES REPETITIVOS---------------------------------------------------------------------------------------*/

  .grid-repeat{
    display: grid;
    grid-template-columns: repeat(1/*numero de repeticiones o patrones, en este caso uno*/, 
    10% 20% 30% 40%);
    grid-template-columns: repeat(2, 10% 20% 30% 40%);
    grid-template-rows: repeat(2, 100px 200px);/*en este caso el patron se rerpite dos veces*/
    grid-auto-rows: 150px;/*cuadriculas sobrantes o que no entren en el patron recibiran estas medidas*/
  }

  /*----------------------------------------------------------------GRID'S DINAMICAS---------------------------------------------------------------------*/

  .grid-dynamics{
    display: grid;
    grid-template-columns: repeat(auto-fill, 100px);/*auto fill rellena la grid con tracks generados dinamicamente*/
    grid-template-columns: repeat(auto-fit, 100px);/*ajusta la grid con los tracks existentes*/
    grid-template-columns: repeat(auto-fill, minmax(100px,1fr));
    grid-template-columns: repeat(auto-fit, minmax(100px,1fr));
  }

  .grid-responsive{
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px/*tamaño minimo*/, 1fr/*tamaño maximo*/));
    gap : 1vh .5vw;
  }

  .grid-nested{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
  }

  .grid{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(4, 1fr);

  }

  .subgrid{
    /*Para que la caracteristica de grid funcione es necesario hacer lo siguiente:
    1)definir explicitamente el tamaño que ocupara el elemento que aplicará aubgrid dentro del
    contenedor padre grid, es decir definir sus propiedades grid-column y grid-row*/
    grid-column: span 3;
    grid-row: 1/3;
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: subgrid;
  }